// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum InviteStatus {
  accepted
  pending
  declined
}

model Account {
  id         String   @id @default(uuid()) @db.Uuid
  email      String   @unique
  name       String
  password   String
  token      String?
  role       Role     @default(MEMBER)
  created_at DateTime @default(now())

  spaces      Space[]
  Reservation Reservation[]

  @@map("accounts")
}

model Guest {
  id         String   @id @default(uuid()) @db.Uuid
  email      String   @unique
  name       String
  created_at DateTime @default(now())

  reservation ReservationGuest[]
  feedback    Feedback[]

  @@map("guests")
}

model Space {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  description  String
  capacity     Int
  category     String
  tags         String[]
  price        Decimal
  images       String[]
  resources    String[]
  available    Boolean  @default(true)
  street       String
  number       Int
  complement   String?
  neighborhood String
  city         String
  state        String
  postal_code  String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  accountId  String   @db.Uuid

  Reservation Reservation[]
  feedback    Feedback[]
  adm         Account       @relation(fields: [accountId], references: [id])

  @@map("spaces")
}

model Reservation {
  id          String    @id @default(uuid()) @db.Uuid
  date        DateTime
  created_at  DateTime  @default(now())
  deleted_at  DateTime?
  finished_at DateTime?
  accountId   String    @db.Uuid
  spaceId     String    @db.Uuid

  feedback Feedback[]
  guests   ReservationGuest[]
  account  Account            @relation(fields: [accountId], references: [id])
  space    Space              @relation(fields: [spaceId], references: [id])

  @@map("reservarions")
}

model ReservationGuest {
  id            String       @id @default(uuid()) @db.Uuid
  reservationId String       @db.Uuid
  guestId       String       @db.Uuid
  invite_status InviteStatus @default(pending)

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  guest       Guest       @relation(fields: [guestId], references: [id])

  @@map("reservation_guests")
}

model Feedback {
  id         String   @id @default(uuid()) @db.Uuid
  rating     Int
  feedback   String?
  created_at DateTime @default(now())

  reservationId String @db.Uuid
  spaceId       String @db.Uuid
  guestId       String @db.Uuid

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  space       Space       @relation(fields: [spaceId], references: [id])
  guest       Guest       @relation(fields: [guestId], references: [id])

  @@map("feedbacks")
}
